// Code generated by protoc-gen-go.
// source: common/protocol/protocol.proto
// DO NOT EDIT!

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	common/protocol/protocol.proto

It has these top-level messages:
	Empty
	TaskEvent
	TaskSignal
	Response
	BuildStatus
	RequestDockerEngineRequest
	DockerEngineInfo
	HostInfo
	S3CredentialsValue
	CredentialsResponse
	CredentialsRequest
	Metric
	PresignedUploadUrlRequest
	PresignedDownloadUrlRequest
	PresignedUrlResponse
	StorageItem
	ListItemsRequest
	ListItemsResponse
	ItemInfoRequest
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskEvent_Type int32

const (
	TaskEvent_Unknown           TaskEvent_Type = 0
	TaskEvent_TaskStart         TaskEvent_Type = 1
	TaskEvent_TaskAddAttributes TaskEvent_Type = 2
	TaskEvent_TaskEnd           TaskEvent_Type = 3
	TaskEvent_StepStart         TaskEvent_Type = 4
	TaskEvent_StepOutput        TaskEvent_Type = 5
	TaskEvent_StepError         TaskEvent_Type = 6
	TaskEvent_StepAddAttributes TaskEvent_Type = 7
	TaskEvent_StepEnd           TaskEvent_Type = 8
)

var TaskEvent_Type_name = map[int32]string{
	0: "Unknown",
	1: "TaskStart",
	2: "TaskAddAttributes",
	3: "TaskEnd",
	4: "StepStart",
	5: "StepOutput",
	6: "StepError",
	7: "StepAddAttributes",
	8: "StepEnd",
}
var TaskEvent_Type_value = map[string]int32{
	"Unknown":           0,
	"TaskStart":         1,
	"TaskAddAttributes": 2,
	"TaskEnd":           3,
	"StepStart":         4,
	"StepOutput":        5,
	"StepError":         6,
	"StepAddAttributes": 7,
	"StepEnd":           8,
}

func (x TaskEvent_Type) String() string {
	return proto.EnumName(TaskEvent_Type_name, int32(x))
}
func (TaskEvent_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type TaskSignal_Type int32

const (
	TaskSignal_Unknown TaskSignal_Type = 0
	TaskSignal_Cancel  TaskSignal_Type = 1
	TaskSignal_AddSSH  TaskSignal_Type = 2
)

var TaskSignal_Type_name = map[int32]string{
	0: "Unknown",
	1: "Cancel",
	2: "AddSSH",
}
var TaskSignal_Type_value = map[string]int32{
	"Unknown": 0,
	"Cancel":  1,
	"AddSSH":  2,
}

func (x TaskSignal_Type) String() string {
	return proto.EnumName(TaskSignal_Type_name, int32(x))
}
func (TaskSignal_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Metric_Type int32

const (
	Metric_Unknown Metric_Type = 0
	Metric_Count   Metric_Type = 1
	Metric_Timing  Metric_Type = 2
)

var Metric_Type_name = map[int32]string{
	0: "Unknown",
	1: "Count",
	2: "Timing",
}
var Metric_Type_value = map[string]int32{
	"Unknown": 0,
	"Count":   1,
	"Timing":  2,
}

func (x Metric_Type) String() string {
	return proto.EnumName(Metric_Type_name, int32(x))
}
func (Metric_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// UI Messages
type TaskEvent struct {
	AllocationId string            `protobuf:"bytes,7,opt,name=allocationId" json:"allocationId,omitempty"`
	StepId       int32             `protobuf:"varint,2,opt,name=stepId" json:"stepId,omitempty"`
	Type         TaskEvent_Type    `protobuf:"varint,3,opt,name=type,enum=protocol.TaskEvent_Type" json:"type,omitempty"`
	Message      []byte            `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Properties   map[string]string `protobuf:"bytes,5,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// unix time in millis
	Timestamp int64 `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *TaskEvent) Reset()                    { *m = TaskEvent{} }
func (m *TaskEvent) String() string            { return proto.CompactTextString(m) }
func (*TaskEvent) ProtoMessage()               {}
func (*TaskEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TaskEvent) GetAllocationId() string {
	if m != nil {
		return m.AllocationId
	}
	return ""
}

func (m *TaskEvent) GetStepId() int32 {
	if m != nil {
		return m.StepId
	}
	return 0
}

func (m *TaskEvent) GetType() TaskEvent_Type {
	if m != nil {
		return m.Type
	}
	return TaskEvent_Unknown
}

func (m *TaskEvent) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *TaskEvent) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *TaskEvent) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type TaskSignal struct {
	Type       TaskSignal_Type   `protobuf:"varint,2,opt,name=type,enum=protocol.TaskSignal_Type" json:"type,omitempty"`
	Properties map[string]string `protobuf:"bytes,3,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// unix time in millis
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *TaskSignal) Reset()                    { *m = TaskSignal{} }
func (m *TaskSignal) String() string            { return proto.CompactTextString(m) }
func (*TaskSignal) ProtoMessage()               {}
func (*TaskSignal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TaskSignal) GetType() TaskSignal_Type {
	if m != nil {
		return m.Type
	}
	return TaskSignal_Unknown
}

func (m *TaskSignal) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *TaskSignal) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Response struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Response) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type BuildStatus struct {
	Finished   int32 `protobuf:"varint,1,opt,name=finished" json:"finished,omitempty"`
	Successful int32 `protobuf:"varint,2,opt,name=successful" json:"successful,omitempty"`
}

func (m *BuildStatus) Reset()                    { *m = BuildStatus{} }
func (m *BuildStatus) String() string            { return proto.CompactTextString(m) }
func (*BuildStatus) ProtoMessage()               {}
func (*BuildStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BuildStatus) GetFinished() int32 {
	if m != nil {
		return m.Finished
	}
	return 0
}

func (m *BuildStatus) GetSuccessful() int32 {
	if m != nil {
		return m.Successful
	}
	return 0
}

type RequestDockerEngineRequest struct {
	ReusableVM         bool   `protobuf:"varint,1,opt,name=ReusableVM" json:"ReusableVM,omitempty"`
	Exclusive          bool   `protobuf:"varint,2,opt,name=Exclusive" json:"Exclusive,omitempty"`
	Image              string `protobuf:"bytes,3,opt,name=Image" json:"Image,omitempty"`
	DockerLayerCaching bool   `protobuf:"varint,4,opt,name=DockerLayerCaching" json:"DockerLayerCaching,omitempty"`
}

func (m *RequestDockerEngineRequest) Reset()                    { *m = RequestDockerEngineRequest{} }
func (m *RequestDockerEngineRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestDockerEngineRequest) ProtoMessage()               {}
func (*RequestDockerEngineRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RequestDockerEngineRequest) GetReusableVM() bool {
	if m != nil {
		return m.ReusableVM
	}
	return false
}

func (m *RequestDockerEngineRequest) GetExclusive() bool {
	if m != nil {
		return m.Exclusive
	}
	return false
}

func (m *RequestDockerEngineRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *RequestDockerEngineRequest) GetDockerLayerCaching() bool {
	if m != nil {
		return m.DockerLayerCaching
	}
	return false
}

type DockerEngineInfo struct {
	EngineURL  string `protobuf:"bytes,1,opt,name=engineURL" json:"engineURL,omitempty"`
	CaCert     string `protobuf:"bytes,2,opt,name=caCert" json:"caCert,omitempty"`
	ClientCert string `protobuf:"bytes,3,opt,name=clientCert" json:"clientCert,omitempty"`
	ClientKey  string `protobuf:"bytes,4,opt,name=clientKey" json:"clientKey,omitempty"`
}

func (m *DockerEngineInfo) Reset()                    { *m = DockerEngineInfo{} }
func (m *DockerEngineInfo) String() string            { return proto.CompactTextString(m) }
func (*DockerEngineInfo) ProtoMessage()               {}
func (*DockerEngineInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DockerEngineInfo) GetEngineURL() string {
	if m != nil {
		return m.EngineURL
	}
	return ""
}

func (m *DockerEngineInfo) GetCaCert() string {
	if m != nil {
		return m.CaCert
	}
	return ""
}

func (m *DockerEngineInfo) GetClientCert() string {
	if m != nil {
		return m.ClientCert
	}
	return ""
}

func (m *DockerEngineInfo) GetClientKey() string {
	if m != nil {
		return m.ClientKey
	}
	return ""
}

type HostInfo struct {
	Id       string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name     string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Status   string            `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	PublicIP string            `protobuf:"bytes,4,opt,name=publicIP" json:"publicIP,omitempty"`
	SshPort  int32             `protobuf:"varint,5,opt,name=sshPort" json:"sshPort,omitempty"`
	SshUser  string            `protobuf:"bytes,6,opt,name=sshUser" json:"sshUser,omitempty"`
	SshKey   string            `protobuf:"bytes,7,opt,name=sshKey" json:"sshKey,omitempty"`
	Docker   *DockerEngineInfo `protobuf:"bytes,8,opt,name=docker" json:"docker,omitempty"`
	Image    string            `protobuf:"bytes,9,opt,name=image" json:"image,omitempty"`
}

func (m *HostInfo) Reset()                    { *m = HostInfo{} }
func (m *HostInfo) String() string            { return proto.CompactTextString(m) }
func (*HostInfo) ProtoMessage()               {}
func (*HostInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *HostInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HostInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HostInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *HostInfo) GetPublicIP() string {
	if m != nil {
		return m.PublicIP
	}
	return ""
}

func (m *HostInfo) GetSshPort() int32 {
	if m != nil {
		return m.SshPort
	}
	return 0
}

func (m *HostInfo) GetSshUser() string {
	if m != nil {
		return m.SshUser
	}
	return ""
}

func (m *HostInfo) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *HostInfo) GetDocker() *DockerEngineInfo {
	if m != nil {
		return m.Docker
	}
	return nil
}

func (m *HostInfo) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type S3CredentialsValue struct {
	AccessKeyId     string `protobuf:"bytes,1,opt,name=accessKeyId" json:"accessKeyId,omitempty"`
	SecretAccessKey string `protobuf:"bytes,2,opt,name=secretAccessKey" json:"secretAccessKey,omitempty"`
	SessionToken    string `protobuf:"bytes,3,opt,name=sessionToken" json:"sessionToken,omitempty"`
	// unix time in millis
	ExpirationTimestamp int64 `protobuf:"varint,4,opt,name=expirationTimestamp" json:"expirationTimestamp,omitempty"`
}

func (m *S3CredentialsValue) Reset()                    { *m = S3CredentialsValue{} }
func (m *S3CredentialsValue) String() string            { return proto.CompactTextString(m) }
func (*S3CredentialsValue) ProtoMessage()               {}
func (*S3CredentialsValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *S3CredentialsValue) GetAccessKeyId() string {
	if m != nil {
		return m.AccessKeyId
	}
	return ""
}

func (m *S3CredentialsValue) GetSecretAccessKey() string {
	if m != nil {
		return m.SecretAccessKey
	}
	return ""
}

func (m *S3CredentialsValue) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *S3CredentialsValue) GetExpirationTimestamp() int64 {
	if m != nil {
		return m.ExpirationTimestamp
	}
	return 0
}

type CredentialsResponse struct {
	Key           string              `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Secret        string              `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	Token         string              `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	S3Credentials *S3CredentialsValue `protobuf:"bytes,4,opt,name=s3Credentials" json:"s3Credentials,omitempty"`
}

func (m *CredentialsResponse) Reset()                    { *m = CredentialsResponse{} }
func (m *CredentialsResponse) String() string            { return proto.CompactTextString(m) }
func (*CredentialsResponse) ProtoMessage()               {}
func (*CredentialsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CredentialsResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CredentialsResponse) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *CredentialsResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CredentialsResponse) GetS3Credentials() *S3CredentialsValue {
	if m != nil {
		return m.S3Credentials
	}
	return nil
}

type CredentialsRequest struct {
}

func (m *CredentialsRequest) Reset()                    { *m = CredentialsRequest{} }
func (m *CredentialsRequest) String() string            { return proto.CompactTextString(m) }
func (*CredentialsRequest) ProtoMessage()               {}
func (*CredentialsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type Metric struct {
	Type  Metric_Type `protobuf:"varint,1,opt,name=type,enum=protocol.Metric_Type" json:"type,omitempty"`
	Name  string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Value int64       `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	Tags  []string    `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Metric) GetType() Metric_Type {
	if m != nil {
		return m.Type
	}
	return Metric_Unknown
}

func (m *Metric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metric) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Metric) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// storage related things
type PresignedUploadUrlRequest struct {
	Key         string            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	ContentType string            `protobuf:"bytes,2,opt,name=contentType" json:"contentType,omitempty"`
	Metadata    map[string]string `protobuf:"bytes,3,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PresignedUploadUrlRequest) Reset()                    { *m = PresignedUploadUrlRequest{} }
func (m *PresignedUploadUrlRequest) String() string            { return proto.CompactTextString(m) }
func (*PresignedUploadUrlRequest) ProtoMessage()               {}
func (*PresignedUploadUrlRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PresignedUploadUrlRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PresignedUploadUrlRequest) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *PresignedUploadUrlRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type PresignedDownloadUrlRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *PresignedDownloadUrlRequest) Reset()                    { *m = PresignedDownloadUrlRequest{} }
func (m *PresignedDownloadUrlRequest) String() string            { return proto.CompactTextString(m) }
func (*PresignedDownloadUrlRequest) ProtoMessage()               {}
func (*PresignedDownloadUrlRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PresignedDownloadUrlRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type PresignedUrlResponse struct {
	Url     string            `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Method  string            `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PresignedUrlResponse) Reset()                    { *m = PresignedUrlResponse{} }
func (m *PresignedUrlResponse) String() string            { return proto.CompactTextString(m) }
func (*PresignedUrlResponse) ProtoMessage()               {}
func (*PresignedUrlResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PresignedUrlResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PresignedUrlResponse) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *PresignedUrlResponse) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

type StorageItem struct {
	Key          string            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	ContentType  string            `protobuf:"bytes,2,opt,name=contentType" json:"contentType,omitempty"`
	Size         int64             `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	LastModified int64             `protobuf:"varint,4,opt,name=lastModified" json:"lastModified,omitempty"`
	Metadata     map[string]string `protobuf:"bytes,5,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StorageItem) Reset()                    { *m = StorageItem{} }
func (m *StorageItem) String() string            { return proto.CompactTextString(m) }
func (*StorageItem) ProtoMessage()               {}
func (*StorageItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *StorageItem) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *StorageItem) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *StorageItem) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *StorageItem) GetLastModified() int64 {
	if m != nil {
		return m.LastModified
	}
	return 0
}

func (m *StorageItem) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type ListItemsRequest struct {
	Prefix string `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
}

func (m *ListItemsRequest) Reset()                    { *m = ListItemsRequest{} }
func (m *ListItemsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListItemsRequest) ProtoMessage()               {}
func (*ListItemsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ListItemsRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type ListItemsResponse struct {
	Items []*StorageItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ListItemsResponse) Reset()                    { *m = ListItemsResponse{} }
func (m *ListItemsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListItemsResponse) ProtoMessage()               {}
func (*ListItemsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ListItemsResponse) GetItems() []*StorageItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type ItemInfoRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *ItemInfoRequest) Reset()                    { *m = ItemInfoRequest{} }
func (m *ItemInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*ItemInfoRequest) ProtoMessage()               {}
func (*ItemInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ItemInfoRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "protocol.Empty")
	proto.RegisterType((*TaskEvent)(nil), "protocol.TaskEvent")
	proto.RegisterType((*TaskSignal)(nil), "protocol.TaskSignal")
	proto.RegisterType((*Response)(nil), "protocol.Response")
	proto.RegisterType((*BuildStatus)(nil), "protocol.BuildStatus")
	proto.RegisterType((*RequestDockerEngineRequest)(nil), "protocol.RequestDockerEngineRequest")
	proto.RegisterType((*DockerEngineInfo)(nil), "protocol.DockerEngineInfo")
	proto.RegisterType((*HostInfo)(nil), "protocol.HostInfo")
	proto.RegisterType((*S3CredentialsValue)(nil), "protocol.S3CredentialsValue")
	proto.RegisterType((*CredentialsResponse)(nil), "protocol.CredentialsResponse")
	proto.RegisterType((*CredentialsRequest)(nil), "protocol.CredentialsRequest")
	proto.RegisterType((*Metric)(nil), "protocol.Metric")
	proto.RegisterType((*PresignedUploadUrlRequest)(nil), "protocol.PresignedUploadUrlRequest")
	proto.RegisterType((*PresignedDownloadUrlRequest)(nil), "protocol.PresignedDownloadUrlRequest")
	proto.RegisterType((*PresignedUrlResponse)(nil), "protocol.PresignedUrlResponse")
	proto.RegisterType((*StorageItem)(nil), "protocol.StorageItem")
	proto.RegisterType((*ListItemsRequest)(nil), "protocol.ListItemsRequest")
	proto.RegisterType((*ListItemsResponse)(nil), "protocol.ListItemsResponse")
	proto.RegisterType((*ItemInfoRequest)(nil), "protocol.ItemInfoRequest")
	proto.RegisterEnum("protocol.TaskEvent_Type", TaskEvent_Type_name, TaskEvent_Type_value)
	proto.RegisterEnum("protocol.TaskSignal_Type", TaskSignal_Type_name, TaskSignal_Type_value)
	proto.RegisterEnum("protocol.Metric_Type", Metric_Type_name, Metric_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DockerCreator service

type DockerCreatorClient interface {
	// Specific to Output Processor
	RequestDockerEngine(ctx context.Context, in *RequestDockerEngineRequest, opts ...grpc.CallOption) (*HostInfo, error)
	DockerEngineStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HostInfo, error)
	FreeDockerEngine(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
}

type dockerCreatorClient struct {
	cc *grpc.ClientConn
}

func NewDockerCreatorClient(cc *grpc.ClientConn) DockerCreatorClient {
	return &dockerCreatorClient{cc}
}

func (c *dockerCreatorClient) RequestDockerEngine(ctx context.Context, in *RequestDockerEngineRequest, opts ...grpc.CallOption) (*HostInfo, error) {
	out := new(HostInfo)
	err := grpc.Invoke(ctx, "/protocol.DockerCreator/requestDockerEngine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerCreatorClient) DockerEngineStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HostInfo, error) {
	out := new(HostInfo)
	err := grpc.Invoke(ctx, "/protocol.DockerCreator/dockerEngineStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerCreatorClient) FreeDockerEngine(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/protocol.DockerCreator/freeDockerEngine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DockerCreator service

type DockerCreatorServer interface {
	// Specific to Output Processor
	RequestDockerEngine(context.Context, *RequestDockerEngineRequest) (*HostInfo, error)
	DockerEngineStatus(context.Context, *Empty) (*HostInfo, error)
	FreeDockerEngine(context.Context, *Empty) (*Response, error)
}

func RegisterDockerCreatorServer(s *grpc.Server, srv DockerCreatorServer) {
	s.RegisterService(&_DockerCreator_serviceDesc, srv)
}

func _DockerCreator_RequestDockerEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDockerEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerCreatorServer).RequestDockerEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.DockerCreator/RequestDockerEngine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerCreatorServer).RequestDockerEngine(ctx, req.(*RequestDockerEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerCreator_DockerEngineStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerCreatorServer).DockerEngineStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.DockerCreator/DockerEngineStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerCreatorServer).DockerEngineStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerCreator_FreeDockerEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerCreatorServer).FreeDockerEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.DockerCreator/FreeDockerEngine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerCreatorServer).FreeDockerEngine(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DockerCreator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.DockerCreator",
	HandlerType: (*DockerCreatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "requestDockerEngine",
			Handler:    _DockerCreator_RequestDockerEngine_Handler,
		},
		{
			MethodName: "dockerEngineStatus",
			Handler:    _DockerCreator_DockerEngineStatus_Handler,
		},
		{
			MethodName: "freeDockerEngine",
			Handler:    _DockerCreator_FreeDockerEngine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/protocol/protocol.proto",
}

// Client API for EventProcessor service

type EventProcessorClient interface {
	// Process task events
	TaskEventProcessor(ctx context.Context, opts ...grpc.CallOption) (EventProcessor_TaskEventProcessorClient, error)
	ProcessTaskEvent(ctx context.Context, in *TaskEvent, opts ...grpc.CallOption) (*Response, error)
	BuildStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BuildStatus, error)
	TaskConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	ListTaskSignals(ctx context.Context, in *Empty, opts ...grpc.CallOption) (EventProcessor_ListTaskSignalsClient, error)
	StorageCredentials(ctx context.Context, in *CredentialsRequest, opts ...grpc.CallOption) (*CredentialsResponse, error)
}

type eventProcessorClient struct {
	cc *grpc.ClientConn
}

func NewEventProcessorClient(cc *grpc.ClientConn) EventProcessorClient {
	return &eventProcessorClient{cc}
}

func (c *eventProcessorClient) TaskEventProcessor(ctx context.Context, opts ...grpc.CallOption) (EventProcessor_TaskEventProcessorClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventProcessor_serviceDesc.Streams[0], c.cc, "/protocol.EventProcessor/taskEventProcessor", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventProcessorTaskEventProcessorClient{stream}
	return x, nil
}

type EventProcessor_TaskEventProcessorClient interface {
	Send(*TaskEvent) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type eventProcessorTaskEventProcessorClient struct {
	grpc.ClientStream
}

func (x *eventProcessorTaskEventProcessorClient) Send(m *TaskEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventProcessorTaskEventProcessorClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventProcessorClient) ProcessTaskEvent(ctx context.Context, in *TaskEvent, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/protocol.EventProcessor/processTaskEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventProcessorClient) BuildStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BuildStatus, error) {
	out := new(BuildStatus)
	err := grpc.Invoke(ctx, "/protocol.EventProcessor/buildStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventProcessorClient) TaskConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/protocol.EventProcessor/taskConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventProcessorClient) ListTaskSignals(ctx context.Context, in *Empty, opts ...grpc.CallOption) (EventProcessor_ListTaskSignalsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventProcessor_serviceDesc.Streams[1], c.cc, "/protocol.EventProcessor/listTaskSignals", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventProcessorListTaskSignalsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventProcessor_ListTaskSignalsClient interface {
	Recv() (*TaskSignal, error)
	grpc.ClientStream
}

type eventProcessorListTaskSignalsClient struct {
	grpc.ClientStream
}

func (x *eventProcessorListTaskSignalsClient) Recv() (*TaskSignal, error) {
	m := new(TaskSignal)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventProcessorClient) StorageCredentials(ctx context.Context, in *CredentialsRequest, opts ...grpc.CallOption) (*CredentialsResponse, error) {
	out := new(CredentialsResponse)
	err := grpc.Invoke(ctx, "/protocol.EventProcessor/storageCredentials", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventProcessor service

type EventProcessorServer interface {
	// Process task events
	TaskEventProcessor(EventProcessor_TaskEventProcessorServer) error
	ProcessTaskEvent(context.Context, *TaskEvent) (*Response, error)
	BuildStatus(context.Context, *Empty) (*BuildStatus, error)
	TaskConfig(context.Context, *Empty) (*Response, error)
	ListTaskSignals(*Empty, EventProcessor_ListTaskSignalsServer) error
	StorageCredentials(context.Context, *CredentialsRequest) (*CredentialsResponse, error)
}

func RegisterEventProcessorServer(s *grpc.Server, srv EventProcessorServer) {
	s.RegisterService(&_EventProcessor_serviceDesc, srv)
}

func _EventProcessor_TaskEventProcessor_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventProcessorServer).TaskEventProcessor(&eventProcessorTaskEventProcessorServer{stream})
}

type EventProcessor_TaskEventProcessorServer interface {
	SendAndClose(*Response) error
	Recv() (*TaskEvent, error)
	grpc.ServerStream
}

type eventProcessorTaskEventProcessorServer struct {
	grpc.ServerStream
}

func (x *eventProcessorTaskEventProcessorServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventProcessorTaskEventProcessorServer) Recv() (*TaskEvent, error) {
	m := new(TaskEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EventProcessor_ProcessTaskEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProcessorServer).ProcessTaskEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.EventProcessor/ProcessTaskEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProcessorServer).ProcessTaskEvent(ctx, req.(*TaskEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventProcessor_BuildStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProcessorServer).BuildStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.EventProcessor/BuildStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProcessorServer).BuildStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventProcessor_TaskConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProcessorServer).TaskConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.EventProcessor/TaskConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProcessorServer).TaskConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventProcessor_ListTaskSignals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventProcessorServer).ListTaskSignals(m, &eventProcessorListTaskSignalsServer{stream})
}

type EventProcessor_ListTaskSignalsServer interface {
	Send(*TaskSignal) error
	grpc.ServerStream
}

type eventProcessorListTaskSignalsServer struct {
	grpc.ServerStream
}

func (x *eventProcessorListTaskSignalsServer) Send(m *TaskSignal) error {
	return x.ServerStream.SendMsg(m)
}

func _EventProcessor_StorageCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProcessorServer).StorageCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.EventProcessor/StorageCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProcessorServer).StorageCredentials(ctx, req.(*CredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventProcessor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.EventProcessor",
	HandlerType: (*EventProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "processTaskEvent",
			Handler:    _EventProcessor_ProcessTaskEvent_Handler,
		},
		{
			MethodName: "buildStatus",
			Handler:    _EventProcessor_BuildStatus_Handler,
		},
		{
			MethodName: "taskConfig",
			Handler:    _EventProcessor_TaskConfig_Handler,
		},
		{
			MethodName: "storageCredentials",
			Handler:    _EventProcessor_StorageCredentials_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "taskEventProcessor",
			Handler:       _EventProcessor_TaskEventProcessor_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "listTaskSignals",
			Handler:       _EventProcessor_ListTaskSignals_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "common/protocol/protocol.proto",
}

// Client API for MetricsCollector service

type MetricsCollectorClient interface {
	Collect(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*Response, error)
}

type metricsCollectorClient struct {
	cc *grpc.ClientConn
}

func NewMetricsCollectorClient(cc *grpc.ClientConn) MetricsCollectorClient {
	return &metricsCollectorClient{cc}
}

func (c *metricsCollectorClient) Collect(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/protocol.MetricsCollector/Collect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MetricsCollector service

type MetricsCollectorServer interface {
	Collect(context.Context, *Metric) (*Response, error)
}

func RegisterMetricsCollectorServer(s *grpc.Server, srv MetricsCollectorServer) {
	s.RegisterService(&_MetricsCollector_serviceDesc, srv)
}

func _MetricsCollector_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsCollectorServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.MetricsCollector/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsCollectorServer).Collect(ctx, req.(*Metric))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetricsCollector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.MetricsCollector",
	HandlerType: (*MetricsCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Collect",
			Handler:    _MetricsCollector_Collect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/protocol/protocol.proto",
}

// Client API for Storage service

type StorageClient interface {
	GeneratePresignedUploadUrl(ctx context.Context, in *PresignedUploadUrlRequest, opts ...grpc.CallOption) (*PresignedUrlResponse, error)
	GeneratePresignedDownloadUrl(ctx context.Context, in *PresignedDownloadUrlRequest, opts ...grpc.CallOption) (*PresignedUrlResponse, error)
	ItemInfo(ctx context.Context, in *ItemInfoRequest, opts ...grpc.CallOption) (*StorageItem, error)
	ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error)
	LatestItem(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*StorageItem, error)
}

type storageClient struct {
	cc *grpc.ClientConn
}

func NewStorageClient(cc *grpc.ClientConn) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) GeneratePresignedUploadUrl(ctx context.Context, in *PresignedUploadUrlRequest, opts ...grpc.CallOption) (*PresignedUrlResponse, error) {
	out := new(PresignedUrlResponse)
	err := grpc.Invoke(ctx, "/protocol.Storage/generatePresignedUploadUrl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GeneratePresignedDownloadUrl(ctx context.Context, in *PresignedDownloadUrlRequest, opts ...grpc.CallOption) (*PresignedUrlResponse, error) {
	out := new(PresignedUrlResponse)
	err := grpc.Invoke(ctx, "/protocol.Storage/generatePresignedDownloadUrl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ItemInfo(ctx context.Context, in *ItemInfoRequest, opts ...grpc.CallOption) (*StorageItem, error) {
	out := new(StorageItem)
	err := grpc.Invoke(ctx, "/protocol.Storage/itemInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error) {
	out := new(ListItemsResponse)
	err := grpc.Invoke(ctx, "/protocol.Storage/listItems", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) LatestItem(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*StorageItem, error) {
	out := new(StorageItem)
	err := grpc.Invoke(ctx, "/protocol.Storage/latestItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Storage service

type StorageServer interface {
	GeneratePresignedUploadUrl(context.Context, *PresignedUploadUrlRequest) (*PresignedUrlResponse, error)
	GeneratePresignedDownloadUrl(context.Context, *PresignedDownloadUrlRequest) (*PresignedUrlResponse, error)
	ItemInfo(context.Context, *ItemInfoRequest) (*StorageItem, error)
	ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error)
	LatestItem(context.Context, *ListItemsRequest) (*StorageItem, error)
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_GeneratePresignedUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresignedUploadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GeneratePresignedUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Storage/GeneratePresignedUploadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GeneratePresignedUploadUrl(ctx, req.(*PresignedUploadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GeneratePresignedDownloadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresignedDownloadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GeneratePresignedDownloadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Storage/GeneratePresignedDownloadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GeneratePresignedDownloadUrl(ctx, req.(*PresignedDownloadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ItemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ItemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Storage/ItemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ItemInfo(ctx, req.(*ItemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Storage/ListItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListItems(ctx, req.(*ListItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_LatestItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).LatestItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Storage/LatestItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).LatestItem(ctx, req.(*ListItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "generatePresignedUploadUrl",
			Handler:    _Storage_GeneratePresignedUploadUrl_Handler,
		},
		{
			MethodName: "generatePresignedDownloadUrl",
			Handler:    _Storage_GeneratePresignedDownloadUrl_Handler,
		},
		{
			MethodName: "itemInfo",
			Handler:    _Storage_ItemInfo_Handler,
		},
		{
			MethodName: "listItems",
			Handler:    _Storage_ListItems_Handler,
		},
		{
			MethodName: "latestItem",
			Handler:    _Storage_LatestItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/protocol/protocol.proto",
}

func init() { proto.RegisterFile("common/protocol/protocol.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xdf, 0x72, 0xdb, 0x44,
	0x17, 0xff, 0x64, 0xc7, 0xb1, 0x7d, 0xdc, 0x24, 0xea, 0x26, 0xfd, 0x70, 0xdd, 0xd2, 0xf1, 0xa8,
	0x30, 0x63, 0x5a, 0x48, 0xdb, 0x74, 0x18, 0xa0, 0x05, 0x4a, 0xea, 0x64, 0xa6, 0x9e, 0x36, 0xd3,
	0xa0, 0x24, 0xbd, 0xdf, 0x48, 0x27, 0xce, 0x4e, 0xe4, 0x5d, 0xb1, 0xbb, 0x6e, 0x6b, 0x1e, 0x00,
	0x2e, 0x78, 0x81, 0x72, 0xc1, 0x0c, 0x4f, 0xc1, 0x0b, 0x70, 0xcb, 0x25, 0x77, 0x3c, 0x08, 0x5c,
	0x32, 0xbb, 0x92, 0x2c, 0x39, 0x56, 0xda, 0x94, 0x81, 0x3b, 0xfd, 0xce, 0x9e, 0x7f, 0x7b, 0xce,
	0xd9, 0xdf, 0xae, 0xe0, 0x5a, 0x20, 0x46, 0x23, 0xc1, 0x6f, 0xc5, 0x52, 0x68, 0x11, 0x88, 0x68,
	0xfa, 0xb1, 0x6e, 0x3f, 0x48, 0x23, 0xc3, 0x5e, 0x1d, 0x6a, 0xdb, 0xa3, 0x58, 0x4f, 0xbc, 0xdf,
	0xaa, 0xd0, 0xdc, 0xa7, 0xea, 0x64, 0xfb, 0x39, 0x72, 0x4d, 0x3c, 0xb8, 0x40, 0xa3, 0x48, 0x04,
	0x54, 0x33, 0xc1, 0x07, 0x61, 0xbb, 0xde, 0x75, 0x7a, 0x4d, 0x7f, 0x46, 0x46, 0xfe, 0x0f, 0x8b,
	0x4a, 0x63, 0x3c, 0x08, 0xdb, 0x95, 0xae, 0xd3, 0xab, 0xf9, 0x29, 0x22, 0x1f, 0xc2, 0x82, 0x9e,
	0xc4, 0xd8, 0xae, 0x76, 0x9d, 0xde, 0xf2, 0x46, 0x7b, 0x7d, 0x1a, 0x7b, 0xea, 0x7e, 0x7d, 0x7f,
	0x12, 0xa3, 0x6f, 0xb5, 0x48, 0x1b, 0xea, 0x23, 0x54, 0x8a, 0x0e, 0xb1, 0xbd, 0xd0, 0x75, 0x7a,
	0x17, 0xfc, 0x0c, 0x92, 0x3e, 0x40, 0x2c, 0x45, 0x8c, 0x52, 0x33, 0x54, 0xed, 0x5a, 0xb7, 0xda,
	0x6b, 0x6d, 0x5c, 0x2f, 0xf3, 0xb6, 0x3b, 0xd5, 0xda, 0xe6, 0x5a, 0x4e, 0xfc, 0x82, 0x19, 0xb9,
	0x0a, 0x4d, 0xcd, 0x46, 0xa8, 0x34, 0x1d, 0xc5, 0xed, 0xc5, 0xae, 0xd3, 0xab, 0xfa, 0xb9, 0xa0,
	0xf3, 0x05, 0xac, 0x9c, 0x32, 0x26, 0x2e, 0x54, 0x4f, 0x70, 0xd2, 0x76, 0xec, 0x86, 0xcd, 0x27,
	0x59, 0x83, 0xda, 0x73, 0x1a, 0x8d, 0xd1, 0x6e, 0xb3, 0xe9, 0x27, 0xe0, 0x5e, 0xe5, 0x53, 0xc7,
	0x7b, 0xe5, 0xc0, 0x82, 0xd9, 0x0a, 0x69, 0x41, 0xfd, 0x80, 0x9f, 0x70, 0xf1, 0x82, 0xbb, 0xff,
	0x23, 0x4b, 0x49, 0x21, 0xf7, 0x34, 0x95, 0xda, 0x75, 0xc8, 0x25, 0xb8, 0x68, 0xe0, 0x66, 0x18,
	0x6e, 0x6a, 0x2d, 0xd9, 0xe1, 0x58, 0xa3, 0x72, 0x2b, 0xc6, 0xc4, 0xee, 0x80, 0x87, 0x6e, 0xd5,
	0x98, 0xec, 0x69, 0x8c, 0x13, 0x93, 0x05, 0xb2, 0x0c, 0x60, 0xe0, 0xd3, 0xb1, 0x8e, 0xc7, 0xda,
	0xad, 0x65, 0xcb, 0xdb, 0x52, 0x0a, 0xe9, 0x2e, 0x1a, 0x8f, 0x06, 0xce, 0x7a, 0xac, 0x1b, 0x8f,
	0x56, 0x8b, 0x87, 0x6e, 0xc3, 0xfb, 0xa1, 0x02, 0x60, 0xb3, 0x60, 0x43, 0x4e, 0x23, 0xf2, 0x51,
	0xda, 0x93, 0x8a, 0xed, 0xc9, 0xe5, 0xd9, 0x2a, 0x26, 0x3a, 0xc5, 0xa6, 0x6c, 0xcd, 0x94, 0xbe,
	0x6a, 0x4b, 0xff, 0x5e, 0xa9, 0xd1, 0xb9, 0x6b, 0xbf, 0xf0, 0x2f, 0xd7, 0xfe, 0x66, 0x59, 0xe9,
	0x01, 0x16, 0xfb, 0x94, 0x07, 0x18, 0xb9, 0x8e, 0xf9, 0xde, 0x0c, 0xc3, 0xbd, 0xbd, 0x47, 0x6e,
	0xc5, 0xfb, 0x12, 0x1a, 0x3e, 0xaa, 0x58, 0x70, 0x65, 0x07, 0x4e, 0x8d, 0x83, 0x00, 0x95, 0xb2,
	0x81, 0x1a, 0x7e, 0x06, 0x8b, 0xa3, 0x98, 0x84, 0xcb, 0xa0, 0x37, 0x80, 0xd6, 0xc3, 0x31, 0x8b,
	0xc2, 0x3d, 0x4d, 0xf5, 0x58, 0x91, 0x0e, 0x34, 0x8e, 0x18, 0x67, 0xea, 0x18, 0x43, 0xeb, 0xa3,
	0xe6, 0x4f, 0x31, 0xb9, 0x06, 0x90, 0xfa, 0x3b, 0x1a, 0x47, 0xe9, 0xc9, 0x28, 0x48, 0xbc, 0x9f,
	0x1d, 0xe8, 0xf8, 0xf8, 0xcd, 0x18, 0x95, 0xde, 0x12, 0xc1, 0x09, 0xca, 0x6d, 0x3e, 0x64, 0x1c,
	0x53, 0x91, 0x31, 0xf7, 0x71, 0xac, 0xe8, 0x61, 0x84, 0xcf, 0x76, 0xd2, 0x04, 0x0b, 0x12, 0x53,
	0xd3, 0xed, 0x97, 0x41, 0x34, 0x56, 0xec, 0x79, 0x92, 0x65, 0xc3, 0xcf, 0x05, 0xa6, 0x5c, 0x83,
	0x91, 0xc9, 0xbf, 0x9a, 0x94, 0xcb, 0x02, 0xb2, 0x0e, 0x24, 0x09, 0xf5, 0x84, 0x4e, 0x50, 0xf6,
	0x69, 0x70, 0xcc, 0xf8, 0xd0, 0x36, 0xa4, 0xe1, 0x97, 0xac, 0x78, 0xdf, 0x39, 0xe0, 0x16, 0x73,
	0x1b, 0xf0, 0x23, 0x61, 0x02, 0xa3, 0x45, 0x07, 0xfe, 0x93, 0xb4, 0x43, 0xb9, 0xc0, 0x70, 0x41,
	0x40, 0xfb, 0x28, 0x75, 0x5a, 0xb9, 0x14, 0x99, 0xed, 0x04, 0x11, 0x43, 0xae, 0xed, 0x5a, 0x92,
	0x55, 0x41, 0x62, 0xbc, 0x26, 0xe8, 0x31, 0x4e, 0x6c, 0x46, 0x4d, 0x3f, 0x17, 0x78, 0x7f, 0x39,
	0xd0, 0x78, 0x24, 0x94, 0xb6, 0x09, 0x2c, 0x43, 0x85, 0x85, 0x69, 0xe4, 0x0a, 0x0b, 0x09, 0x81,
	0x05, 0x4e, 0x47, 0x59, 0xab, 0xec, 0x77, 0x42, 0x49, 0xa6, 0x45, 0x69, 0xa8, 0x14, 0x99, 0x86,
	0xc5, 0xe3, 0xc3, 0x88, 0x05, 0x83, 0xdd, 0x34, 0xca, 0x14, 0xdb, 0x79, 0x50, 0xc7, 0xbb, 0x42,
	0xea, 0x76, 0xcd, 0x76, 0x2b, 0x83, 0xe9, 0xca, 0x81, 0x42, 0x69, 0x99, 0xa3, 0xe9, 0x67, 0xd0,
	0xc6, 0x51, 0xc7, 0x26, 0xe7, 0x7a, 0x1a, 0xc7, 0x22, 0xb2, 0x01, 0x8b, 0xa1, 0x2d, 0x5c, 0xbb,
	0xd1, 0x75, 0x7a, 0xad, 0x8d, 0x4e, 0x7e, 0x66, 0x4e, 0x17, 0xd4, 0x4f, 0x35, 0x4d, 0xcf, 0x98,
	0xed, 0x59, 0x33, 0xe9, 0x99, 0x05, 0xde, 0x2f, 0x0e, 0x90, 0xbd, 0xbb, 0x7d, 0x89, 0x21, 0x72,
	0xcd, 0x68, 0xa4, 0x9e, 0x99, 0xc9, 0x27, 0x5d, 0x68, 0x51, 0x3b, 0x4a, 0x8f, 0x71, 0x32, 0xc8,
	0xaa, 0x51, 0x14, 0x91, 0x1e, 0xac, 0x28, 0x0c, 0x24, 0xea, 0xcd, 0x4c, 0x98, 0x56, 0xe8, 0xb4,
	0xd8, 0x70, 0xbc, 0x42, 0xa5, 0x98, 0xe0, 0xfb, 0xe2, 0x04, 0x79, 0x5a, 0xb2, 0x19, 0x19, 0xb9,
	0x0d, 0xab, 0xf8, 0x32, 0x66, 0xd2, 0x72, 0xfe, 0xfe, 0xa9, 0xc3, 0x5c, 0xb6, 0xe4, 0xfd, 0xe8,
	0xc0, 0x6a, 0x21, 0xed, 0xe9, 0xb1, 0x9b, 0x3f, 0xdb, 0xa6, 0x88, 0x36, 0xa5, 0x6c, 0x66, 0x12,
	0x64, 0x0a, 0xa2, 0x0b, 0x09, 0x25, 0x80, 0x3c, 0x84, 0x25, 0x55, 0xac, 0x87, 0xcd, 0xa1, 0xb5,
	0x71, 0x35, 0xaf, 0xf0, 0x7c, 0xb9, 0xfc, 0x59, 0x13, 0x6f, 0x0d, 0xc8, 0x4c, 0x6a, 0xf6, 0xc8,
	0x79, 0x3f, 0x39, 0xb0, 0xb8, 0x83, 0x5a, 0xb2, 0x80, 0x7c, 0x90, 0xd2, 0xa4, 0x63, 0x69, 0xf2,
	0x52, 0xee, 0x3b, 0x59, 0x2f, 0x52, 0x64, 0xd9, 0xf8, 0x4d, 0xd9, 0xaa, 0x6a, 0xeb, 0x93, 0x00,
	0xa3, 0xa9, 0xe9, 0xd0, 0x24, 0x5c, 0x35, 0x9a, 0xe6, 0xdb, 0xbb, 0x51, 0xc6, 0x5e, 0x4d, 0xa8,
	0xf5, 0xc5, 0x98, 0xeb, 0x84, 0xbc, 0xf6, 0xd9, 0x88, 0xf1, 0xa1, 0x5b, 0xf1, 0xfe, 0x70, 0xe0,
	0xf2, 0xae, 0x44, 0xc5, 0x86, 0x1c, 0xc3, 0x83, 0x38, 0x12, 0x34, 0x3c, 0x90, 0x51, 0x46, 0x18,
	0xf3, 0x75, 0xed, 0x42, 0x2b, 0x10, 0x5c, 0x23, 0xd7, 0xfb, 0x19, 0xe5, 0x37, 0xfd, 0xa2, 0x88,
	0xec, 0x40, 0x63, 0x84, 0x9a, 0x86, 0x54, 0xd3, 0x94, 0xdc, 0xef, 0xe4, 0x5b, 0x3d, 0x33, 0x94,
	0x29, 0x82, 0xb5, 0x49, 0x98, 0x7e, 0xea, 0xa2, 0x73, 0x1f, 0x96, 0x66, 0x96, 0xde, 0x8a, 0xc7,
	0x6f, 0xc1, 0x95, 0x69, 0xc4, 0x2d, 0xf1, 0x82, 0xbf, 0x69, 0x7b, 0xde, 0xaf, 0x0e, 0xac, 0xe5,
	0x39, 0x1a, 0xcd, 0x7c, 0xc2, 0xc6, 0x32, 0xca, 0x54, 0xc7, 0x32, 0x32, 0x13, 0x36, 0x42, 0x7d,
	0x2c, 0xc2, 0x6c, 0xc2, 0x12, 0x44, 0xb6, 0xa1, 0x7e, 0x8c, 0x34, 0x44, 0x99, 0xdd, 0x6d, 0x37,
	0xcb, 0xb6, 0x9f, 0xbb, 0x5e, 0x7f, 0x94, 0x68, 0x27, 0x1b, 0xcf, 0x6c, 0x3b, 0xf7, 0xe0, 0x42,
	0x71, 0xe1, 0xad, 0xb6, 0xfd, 0xa7, 0x03, 0xad, 0x3d, 0x2d, 0x24, 0x1d, 0xe2, 0x40, 0xe3, 0xe8,
	0x1f, 0xb5, 0x91, 0xc0, 0x82, 0x62, 0xdf, 0x66, 0xd3, 0x66, 0xbf, 0xcd, 0xa1, 0x8e, 0xa8, 0xd2,
	0x3b, 0x22, 0x64, 0x47, 0x0c, 0xc3, 0xf4, 0xa4, 0xce, 0xc8, 0xc8, 0x83, 0x42, 0xfb, 0xe7, 0x9e,
	0x55, 0x85, 0xa4, 0xfe, 0x9b, 0x86, 0xdf, 0x00, 0xf7, 0x09, 0x53, 0xda, 0x04, 0xc8, 0x8e, 0xa0,
	0x69, 0x54, 0x2c, 0xf1, 0x88, 0xbd, 0x4c, 0x5d, 0xa4, 0xc8, 0xfb, 0x0a, 0x2e, 0x16, 0x74, 0xd3,
	0x3e, 0xdf, 0x84, 0x1a, 0x33, 0x82, 0xb6, 0x63, 0x73, 0xbf, 0x54, 0x9a, 0xbb, 0x9f, 0xe8, 0x78,
	0xd7, 0x61, 0xc5, 0x40, 0xcb, 0xb8, 0x67, 0x8d, 0xd4, 0xc6, 0xef, 0x0e, 0x2c, 0x25, 0xfc, 0xdc,
	0x97, 0x48, 0xb5, 0x90, 0xe4, 0x29, 0xac, 0xca, 0xf9, 0x4b, 0x9a, 0x14, 0xde, 0x40, 0x67, 0xdf,
	0xe1, 0x1d, 0x92, 0x6b, 0x4d, 0x6f, 0xaf, 0xcf, 0x80, 0x84, 0x05, 0xd5, 0xf4, 0x21, 0xb1, 0x92,
	0x6b, 0xda, 0x57, 0x78, 0xa9, 0xe9, 0x27, 0xe0, 0x1e, 0x49, 0xc4, 0x99, 0x44, 0x5e, 0x67, 0x98,
	0x15, 0x6a, 0xe3, 0xfb, 0x2a, 0x2c, 0xdb, 0x17, 0xf2, 0xae, 0x14, 0x86, 0xf4, 0x85, 0x24, 0x0f,
	0x80, 0xe8, 0xec, 0xdd, 0x9c, 0x4b, 0x57, 0x4b, 0x5e, 0xd5, 0x65, 0x1e, 0x7b, 0x0e, 0xb9, 0x0f,
	0x6e, 0x9c, 0xd8, 0xe5, 0x3f, 0x0b, 0xe7, 0x35, 0x27, 0x1f, 0x43, 0xeb, 0xb0, 0xf0, 0x8c, 0x9a,
	0xdb, 0x44, 0xa1, 0x95, 0xc5, 0xe7, 0xd6, 0x1d, 0x00, 0x93, 0x74, 0x5f, 0xf0, 0x23, 0x36, 0x3c,
	0xd7, 0xd6, 0xc9, 0x3d, 0x58, 0x89, 0x98, 0xd2, 0xf9, 0x43, 0xb5, 0x24, 0xda, 0x5a, 0xd9, 0x83,
	0xf6, 0xb6, 0x43, 0xbe, 0x06, 0xa2, 0x92, 0x41, 0x2a, 0x5c, 0x16, 0xa4, 0x70, 0xd1, 0xcc, 0xdf,
	0x21, 0x9d, 0x77, 0xcf, 0x58, 0x4d, 0x3b, 0xd1, 0x07, 0x37, 0xb9, 0x41, 0x54, 0x5f, 0x44, 0x11,
	0x06, 0x66, 0xc4, 0x6e, 0x41, 0x3d, 0x05, 0xc4, 0x3d, 0x7d, 0xd1, 0x94, 0xb6, 0xf3, 0x55, 0xd5,
	0x3c, 0xf0, 0x6d, 0x62, 0x84, 0x42, 0x67, 0x88, 0x1c, 0x25, 0xd5, 0x38, 0xcf, 0xd7, 0xe4, 0xfa,
	0x39, 0xd8, 0xbc, 0x73, 0xed, 0xf5, 0x9c, 0x47, 0x10, 0xae, 0xce, 0x85, 0x28, 0x10, 0x34, 0x79,
	0xbf, 0xc4, 0x7e, 0x9e, 0xc0, 0xdf, 0x18, 0xe6, 0x73, 0x68, 0xb0, 0xf4, 0x80, 0x92, 0xc2, 0x7f,
	0xc9, 0xa9, 0x43, 0xdb, 0x29, 0x3f, 0xe5, 0x64, 0x0b, 0x9a, 0x51, 0x46, 0x10, 0xa4, 0xf0, 0xda,
	0x3a, 0xcd, 0x30, 0x9d, 0x2b, 0xa5, 0x6b, 0x69, 0x0e, 0x0f, 0x00, 0x22, 0xaa, 0x31, 0x11, 0xbf,
	0xd6, 0x4d, 0x79, 0x1a, 0x0f, 0x2f, 0xc3, 0x3b, 0x81, 0x18, 0xad, 0x07, 0x4c, 0x06, 0x11, 0x06,
	0x6c, 0xdd, 0x4e, 0x39, 0x1d, 0x22, 0xd7, 0x87, 0x8b, 0xd6, 0xe0, 0xee, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x3f, 0x52, 0x6d, 0xd6, 0x93, 0x0f, 0x00, 0x00,
}
